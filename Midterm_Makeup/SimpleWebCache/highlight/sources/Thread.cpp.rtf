{\rtf1\ansi \deff1{\fonttbl{\f1\fmodern\fprq1\fcharset0 Courier New;}}{\colortbl;\red224\green234\blue238;\red00\green00\blue00;\red191\green03\blue03;\red176\green126\blue00;\red131\green129\blue131;\red131\green129\blue131;\red255\green00\blue255;\red00\green130\blue00;\red129\green129\blue00;\red85\green85\blue85;\red00\green00\blue00;\red00\green87\blue174;\red00\green00\blue00;\red00\green87\blue174;\red00\green00\blue00;\red01\green01\blue129;}
\paperw11905\paperh16837\margl1134\margr1134\margt1134\margb1134\sectd\plain\f1\fs20
\pard \cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"Thread.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Modifier: Set thread running flag\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{setRunning}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{bool}} {\cf2{_running}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	running}} {\cf11{=}} {\cf2{_running}}{\cf11{;}} {\cf2{}}{\cf5{\i // Set running\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf6{\i /* Static clean up method. It is defined as private as it need to be only invoked from within the object data members\i0 }}}\par\pard
\cbpat1{{\cf6{\i Since it is static it received a void pointer that represent a pointer to the invoking object */\i0 }}{\cf2{}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{cleanup}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{*}} {\cf2{target_thread}}{\cf11{)}} }\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{    Thread}} {\cf11{*}} {\cf2{me}} {\cf11{= (}}{\cf2{Thread}} {\cf11{*)}} {\cf2{target_thread}}{\cf11{;}} {\cf2{}}{\cf5{\i // Cast target_thread to a Thread *\i0 }}}\par\pard
\cbpat1{{\cf2{    me}}{\cf11{->}}{\cf2{}}{\cf16{setRunning}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf13{\b false\b0 }}{\cf2{}}{\cf11{);}}  {\cf2{}}{\cf5{\i // Set the thread as not running\i0 }}}\par\pard
\cbpat1{{\cf2{    me}}{\cf11{->}}{\cf2{started}} {\cf11{=}} {\cf2{}}{\cf13{\b false\b0 }}{\cf2{}}{\cf11{;}}    {\cf2{}}{\cf5{\i // Set the thread as not started\i0 }}}\par\pard
\cbpat1{{\cf2{    me}}{\cf11{->}}{\cf2{termination_request}} {\cf11{=}} {\cf2{}}{\cf13{\b true\b0 }}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{\i // Set termination request to false\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{pthread_mutex_unlock}}{\cf2{}}{\cf11{(&}}{\cf2{me}}{\cf11{->}}{\cf2{mutex}}{\cf11{);}}   {\cf2{}}{\cf5{\i // Unlock the execution management mutex\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Thread Constructor: Allows for overriding the pthread_create start routine parameters with another static method than "run" if needed\i0 }}}\par\pard
\cbpat1{{\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{Thread}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{*(*}}{\cf2{_threadRoutine}}{\cf11{) (}}{\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{*))}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}    {\cf14{size_t}} {\cf2{stacksize}} {\cf11{=}} {\cf2{}}{\cf4{{1}{0}{2}{4}}}{\cf2{}}{\cf11{*}}{\cf2{}}{\cf4{{1}{0}{2}{4}}}{\cf2{}}{\cf11{*}}{\cf2{}}{\cf4{{4}}}{\cf2{}}{\cf11{;}}  {\cf2{}}{\cf5{\i // Set stack to {4} MB   \i0 }}}\par\pard
\cbpat1{{\cf2{    running}} {\cf11{=}} {\cf2{}}{\cf13{\b false\b0 }}{\cf2{}}{\cf11{;}}    {\cf2{}}{\cf5{\i // Set running to false\i0 }}}\par\pard
\cbpat1{{\cf2{    started}} {\cf11{=}} {\cf2{}}{\cf13{\b false\b0 }}{\cf2{}}{\cf11{;}}    {\cf2{}}{\cf5{\i // Set started to false\i0 }}}\par\pard
\cbpat1{{\cf2{    termination_request}} {\cf11{=}} {\cf2{}}{\cf13{\b false\b0 }}{\cf2{}}{\cf11{;}}    {\cf2{}}{\cf5{\i // Set termination request to false\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{pthread_mutex_init}} {\cf2{}}{\cf11{(&}}{\cf2{mutex}}{\cf11{,}}{\cf2{NULL}}{\cf11{);}}{\cf2{}}{\cf5{\i // Initialize execution control mutex\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{\b if\b0 }} {\cf2{}}{\cf11{(}} {\cf2{_threadRoutine}} {\cf11{!=}} {\cf2{NULL}} {\cf11{)}} {\cf2{threadRoutine}}{\cf11{=}}{\cf2{_threadRoutine}}{\cf11{;}} {\cf2{}}{\cf5{\i // Set the pthread start routine to _threadRoutine if not NULL \i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{\b else\b0 }} {\cf2{threadRoutine}} {\cf11{= &}}{\cf2{run}}{\cf11{;}}  {\cf2{}}{\cf5{\i // Else use the default static method run\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{pthread_attr_init}}{\cf2{}}{\cf11{(&}}{\cf2{pthread_attr}}{\cf11{);}}   {\cf2{}}{\cf5{\i // Initialize pthread attributes\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{pthread_attr_setdetachstate}} {\cf2{}}{\cf11{(&}}{\cf2{pthread_attr}}{\cf11{,}}{\cf2{PTHREAD_CREATE_DETACHED}}{\cf11{);}} {\cf2{}}{\cf5{\i // Set thread as dettached at creation time\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{pthread_attr_setstacksize}}{\cf2{}}{\cf11{(&}}{\cf2{pthread_attr}}{\cf11{,}} {\cf2{stacksize}} {\cf11{);}} {\cf2{}}{\cf5{\i // Set new stack size\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf14{struct}} {\cf2{timeb thread_name}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{ftime}}{\cf2{}}{\cf11{( &}}{\cf2{thread_name}} {\cf11{);}}  {\cf2{}}{\cf5{\i // Get time snapshot in milli-seconds\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{memset}} {\cf2{}}{\cf11{(}} {\cf2{identifier}}{\cf11{,}}{\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{,}}{\cf2{}}{\cf4{{1}{2}{8}}}{\cf2{}}{\cf11{);}} {\cf2{}}{\cf5{\i // Initialize identifier\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{sprintf}} {\cf2{}}{\cf11{(}} {\cf2{identifier}}{\cf11{,}}{\cf2{}}{\cf3{"%d.%d"}}{\cf2{}}{\cf11{,(}}{\cf2{}}{\cf14{int}}{\cf2{}}{\cf11{)}} {\cf2{thread_name}}{\cf11{.}}{\cf2{millitm}}{\cf11{,(}}{\cf2{}}{\cf14{int}}{\cf2{}}{\cf11{)}} {\cf2{thread_name}}{\cf11{.}}{\cf2{time}}{\cf11{);}} {\cf2{}}{\cf5{\i // Set Identifier string\i0 }}}\par\pard
\cbpat1{{\cf2{    cpu_count}} {\cf11{=}} {\cf2{}}{\cf16{sysconf}}{\cf2{}}{\cf11{(}} {\cf2{_SC_NPROCESSORS_ONLN}} {\cf11{);}} {\cf2{}}{\cf5{\i // get the number of CPUs on the target running environment\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Selector: check if thread is running\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf14{bool}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{isRunning}} {\cf2{}}{\cf11{()}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{\b return\b0 }} {\cf2{running}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Selector: get the thread identifier\i0 }}}\par\pard
\cbpat1{{\cf2{pthread_t}} {\cf11{*}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{getThreadHandler}}{\cf2{}}{\cf11{()}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{\b return\b0 }} {\cf2{}}{\cf11{&}} {\cf2{pthread}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Start the execution of the thread\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{start}}{\cf2{}}{\cf11{()}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{pthread_mutex_lock}}{\cf2{}}{\cf11{(&}}{\cf2{mutex}}{\cf11{);}} {\cf2{}}{\cf5{\i // Acquire lock before forking the thread\i0 }}}\par\pard
\cbpat1{{\cf2{    started}}{\cf11{=}}{\cf2{}}{\cf13{\b true\b0 }}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{\i // Set started to true\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf5{\i // Invoke pthread create and pass to the routine the current object as the start routine need to be static\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf14{int}} {\cf2{created}} {\cf11{=}} {\cf2{}}{\cf16{pthread_create}} {\cf2{}}{\cf11{(&}}{\cf2{pthread}}{\cf11{,&}}{\cf2{pthread_attr}}{\cf11{,}}{\cf2{threadRoutine}}{\cf11{,}}{\cf2{}}{\cf13{\b this\b0 }}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{\b if\b0 }} {\cf2{}}{\cf11{(}} {\cf2{created}} {\cf11{!=}} {\cf2{}}{\cf4{{0}}} {\cf2{}}{\cf11{)}} {\cf2{}}{\cf5{\i // If the return in not zero then pthread_create failed\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}        {\cf5{\i // Print an error message with the return integer value\i0 }}}\par\pard
\cbpat1{{\cf2{}}        {\cf16{printf}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"error creating thread: %d}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}{\cf11{,}}{\cf2{created}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}        {\cf5{\i // Check the error type and print an equivalent error message\i0 }}}\par\pard
\cbpat1{{\cf2{}}        {\cf13{\b if\b0 }} {\cf2{}}{\cf11{(}}{\cf2{created}} {\cf11{==}} {\cf2{EAGAIN}}{\cf11{)}} {\cf2{}}{\cf16{printf}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"EAGAIN generated}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}        {\cf13{\b else if\b0 }} {\cf2{}}{\cf11{(}}{\cf2{created}} {\cf11{==}} {\cf2{EINVAL}}{\cf11{)}} {\cf2{}}{\cf16{printf}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"EINVAL generated}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}        {\cf13{\b else if\b0 }} {\cf2{}}{\cf11{(}}{\cf2{created}} {\cf11{==}} {\cf2{EPERM}}{\cf11{)}} {\cf2{}}{\cf16{printf}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"EPERM generated}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}        {\cf13{\b else if\b0 }} {\cf2{}}{\cf11{(}}{\cf2{created}} {\cf11{==}} {\cf2{ENOMEM}}{\cf11{)}} {\cf2{}}{\cf16{printf}} {\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"ENOMEM generated}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{        started}}{\cf11{=}} {\cf2{}}{\cf13{\b false\b0 }}{\cf2{}}{\cf11{;}} {\cf2{}}{\cf5{\i // Set started to false\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{\b else\b0 }} {\cf2{}}{\cf16{setRunning}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf13{\b true\b0 }}{\cf2{}}{\cf11{);}} {\cf2{}}{\cf5{\i // Else thread is marked running \i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Static method passed to pthread_create\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{*}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{run}}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{*}} {\cf2{arg}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{	Thread}} {\cf11{*}} {\cf2{me}} {\cf11{= (}}{\cf2{Thread}} {\cf11{*)}} {\cf2{arg}}{\cf11{;}} {\cf2{}}{\cf5{\i // Cast the arg to Thread * which is the current thread\i0 }}}\par\pard
\cbpat1{{\cf2{}}        {\cf5{\i // Push the cleanup static function to the cleanup functions stack to be invoked within pthread_exit\i0 }}}\par\pard
\cbpat1{{\cf2{}}        {\cf5{\i // Notice the close curly bracket that substitute for the complementary pthread_cleanup_pop\i0 }}}\par\pard
\cbpat1{{\cf2{}}        {\cf16{pthread_cleanup_push}}{\cf2{}}{\cf11{(}}{\cf2{cleanup}}{\cf11{,}}{\cf2{arg}}{\cf11{); \}}}  }\par\pard
\cbpat1{{\cf2{}}{\cf5{\i //   	pthread_detach (me->pthread); \i0 }}}\par\pard
\cbpat1{{\cf2{	me}}{\cf11{->}}{\cf2{}}{\cf16{threadMainBody}}{\cf2{}}{\cf11{(}}{\cf2{arg}}{\cf11{);}} {\cf2{}}{\cf5{\i //Invoke the thread main function body\i0 }}}\par\pard
\cbpat1{{\cf2{}}        {\cf16{pthread_exit}}{\cf2{}}{\cf11{(}}{\cf2{NULL}}{\cf11{);}} {\cf2{}}{\cf5{\i // Invoke pthread_exit to terminate and invoke the cleanup functions.\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Block until thread finishes execution\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{waitForRunToFinish}} {\cf2{}}{\cf11{()}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{pthread_mutex_lock}}{\cf2{}}{\cf11{(&}}{\cf2{mutex}}{\cf11{);}} {\cf2{}}{\cf5{\i // Lock mutex which will block in case the thread is running\i0 }}}\par\pard
\cbpat1{{\cf2{}}	{\cf16{pthread_mutex_unlock}}{\cf2{}}{\cf11{(&}}{\cf2{mutex}}{\cf11{);}}   {\cf2{}}{\cf5{\i // Unlock mutex as soon as it is acquired,which guarantees that the thread terminated\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Get Thread readable Identifier\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf14{char}} {\cf2{}}{\cf11{*}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{getThreadIdentifier}} {\cf2{}}{\cf11{()}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf13{\b return\b0 }} {\cf2{identifier}}{\cf11{;}}  {\cf2{}}{\cf5{\i // return thread readable identifier\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Selector: Check if thread is started \i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf14{bool}} {\cf2{Thread}}{\cf11{::}}{\cf2{}}{\cf16{isAlive}} {\cf2{}}{\cf11{()}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{\b if\b0 }} {\cf2{}}{\cf11{( !}}{\cf2{started}} {\cf11{)}} {\cf2{}}{\cf13{\b return false\b0 }}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{\b else return true\b0 }}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{\i // Destructor\i0 }}}\par\pard
\cbpat1{{\cf2{Thread}}{\cf11{::~}}{\cf2{}}{\cf16{Thread}}{\cf2{}}{\cf11{()}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{pthread_attr_destroy}}{\cf2{}}{\cf11{(&}}{\cf2{pthread_attr}}{\cf11{);}}    {\cf2{}}{\cf5{\i // Destroy pthread attributes    \i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{\b if\b0 }} {\cf2{}}{\cf11{(}} {\cf2{started}} {\cf11{)}} {\cf2{}}{\cf16{pthread_join}} {\cf2{}}{\cf11{(}}{\cf2{pthread}}{\cf11{,}}{\cf2{NULL}}{\cf11{);}} {\cf2{}}{\cf5{\i // Join on pthread if started\i0 }}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{pthread_mutex_destroy}}{\cf2{}}{\cf11{(&}}{\cf2{mutex}}{\cf11{);}}  {\cf2{}}{\cf5{\i //Destroy execution control mutex\i0 }}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}{\cf2{}}}\par\pard
\cbpat1{}}
